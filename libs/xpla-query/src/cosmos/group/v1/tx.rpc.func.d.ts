import { SigningClientResolver } from "../../../helper-func-types";
import { MsgCreateGroup, MsgUpdateGroupMembers, MsgUpdateGroupAdmin, MsgUpdateGroupMetadata, MsgCreateGroupPolicy, MsgCreateGroupWithPolicy, MsgUpdateGroupPolicyAdmin, MsgUpdateGroupPolicyDecisionPolicy, MsgUpdateGroupPolicyMetadata, MsgSubmitProposal, MsgWithdrawProposal, MsgVote, MsgExec, MsgLeaveGroup } from "./tx";
export declare const createCreateGroup: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgCreateGroup, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useCreateGroup: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroup>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroup>, unknown>;
export declare const createUpdateGroupMembers: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupMembers, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupMembers: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupMembers>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupMembers>, unknown>;
export declare const createUpdateGroupAdmin: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupAdmin, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupAdmin: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupAdmin>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupAdmin>, unknown>;
export declare const createUpdateGroupMetadata: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupMetadata, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupMetadata: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupMetadata>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupMetadata>, unknown>;
export declare const createCreateGroupPolicy: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgCreateGroupPolicy, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useCreateGroupPolicy: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroupPolicy>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroupPolicy>, unknown>;
export declare const createCreateGroupWithPolicy: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgCreateGroupWithPolicy, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useCreateGroupWithPolicy: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroupWithPolicy>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCreateGroupWithPolicy>, unknown>;
export declare const createUpdateGroupPolicyAdmin: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupPolicyAdmin, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupPolicyAdmin: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyAdmin>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyAdmin>, unknown>;
export declare const createUpdateGroupPolicyDecisionPolicy: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupPolicyDecisionPolicy, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupPolicyDecisionPolicy: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyDecisionPolicy>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyDecisionPolicy>, unknown>;
export declare const createUpdateGroupPolicyMetadata: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateGroupPolicyMetadata, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateGroupPolicyMetadata: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyMetadata>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateGroupPolicyMetadata>, unknown>;
export declare const createSubmitProposal: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgSubmitProposal, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useSubmitProposal: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgSubmitProposal>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgSubmitProposal>, unknown>;
export declare const createWithdrawProposal: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgWithdrawProposal, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useWithdrawProposal: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawProposal>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawProposal>, unknown>;
export declare const createVote: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgVote, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useVote: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgVote>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgVote>, unknown>;
export declare const createExec: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgExec, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useExec: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgExec>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgExec>, unknown>;
export declare const createLeaveGroup: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgLeaveGroup, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useLeaveGroup: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgLeaveGroup>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgLeaveGroup>, unknown>;
