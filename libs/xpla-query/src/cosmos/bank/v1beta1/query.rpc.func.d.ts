import { RpcResolver } from "../../../helper-func-types";
import { QueryBalanceRequest, QueryBalanceResponse, QueryAllBalancesRequest, QueryAllBalancesResponse, QuerySpendableBalancesRequest, QuerySpendableBalancesResponse, QuerySpendableBalanceByDenomRequest, QuerySpendableBalanceByDenomResponse, QueryTotalSupplyRequest, QueryTotalSupplyResponse, QuerySupplyOfRequest, QuerySupplyOfResponse, QueryParamsRequest, QueryParamsResponse, QueryDenomMetadataRequest, QueryDenomMetadataResponse, QueryDenomMetadataByQueryStringRequest, QueryDenomMetadataByQueryStringResponse, QueryDenomsMetadataRequest, QueryDenomsMetadataResponse, QueryDenomOwnersRequest, QueryDenomOwnersResponse, QueryDenomOwnersByQueryRequest, QueryDenomOwnersByQueryResponse, QuerySendEnabledRequest, QuerySendEnabledResponse } from "./query";
export declare const createGetBalance: (clientResolver?: RpcResolver) => (request: QueryBalanceRequest) => Promise<QueryBalanceResponse>;
export declare const useGetBalance: <TData = QueryBalanceResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryBalanceRequest, QueryBalanceResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetAllBalances: (clientResolver?: RpcResolver) => (request: QueryAllBalancesRequest) => Promise<QueryAllBalancesResponse>;
export declare const useGetAllBalances: <TData = QueryAllBalancesResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryAllBalancesRequest, QueryAllBalancesResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetSpendableBalances: (clientResolver?: RpcResolver) => (request: QuerySpendableBalancesRequest) => Promise<QuerySpendableBalancesResponse>;
export declare const useGetSpendableBalances: <TData = QuerySpendableBalancesResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QuerySpendableBalancesRequest, QuerySpendableBalancesResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetSpendableBalanceByDenom: (clientResolver?: RpcResolver) => (request: QuerySpendableBalanceByDenomRequest) => Promise<QuerySpendableBalanceByDenomResponse>;
export declare const useGetSpendableBalanceByDenom: <TData = QuerySpendableBalanceByDenomResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QuerySpendableBalanceByDenomRequest, QuerySpendableBalanceByDenomResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTotalSupply: (clientResolver?: RpcResolver) => (request: QueryTotalSupplyRequest) => Promise<QueryTotalSupplyResponse>;
export declare const useGetTotalSupply: <TData = QueryTotalSupplyResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryTotalSupplyRequest, QueryTotalSupplyResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetSupplyOf: (clientResolver?: RpcResolver) => (request: QuerySupplyOfRequest) => Promise<QuerySupplyOfResponse>;
export declare const useGetSupplyOf: <TData = QuerySupplyOfResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QuerySupplyOfRequest, QuerySupplyOfResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetParams: (clientResolver?: RpcResolver) => (request: QueryParamsRequest) => Promise<QueryParamsResponse>;
export declare const useGetParams: <TData = QueryParamsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryParamsRequest, QueryParamsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDenomMetadata: (clientResolver?: RpcResolver) => (request: QueryDenomMetadataRequest) => Promise<QueryDenomMetadataResponse>;
export declare const useGetDenomMetadata: <TData = QueryDenomMetadataResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDenomMetadataRequest, QueryDenomMetadataResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDenomMetadataByQueryString: (clientResolver?: RpcResolver) => (request: QueryDenomMetadataByQueryStringRequest) => Promise<QueryDenomMetadataByQueryStringResponse>;
export declare const useGetDenomMetadataByQueryString: <TData = QueryDenomMetadataByQueryStringResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDenomMetadataByQueryStringRequest, QueryDenomMetadataByQueryStringResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDenomsMetadata: (clientResolver?: RpcResolver) => (request: QueryDenomsMetadataRequest) => Promise<QueryDenomsMetadataResponse>;
export declare const useGetDenomsMetadata: <TData = QueryDenomsMetadataResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDenomsMetadataRequest, QueryDenomsMetadataResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDenomOwners: (clientResolver?: RpcResolver) => (request: QueryDenomOwnersRequest) => Promise<QueryDenomOwnersResponse>;
export declare const useGetDenomOwners: <TData = QueryDenomOwnersResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDenomOwnersRequest, QueryDenomOwnersResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDenomOwnersByQuery: (clientResolver?: RpcResolver) => (request: QueryDenomOwnersByQueryRequest) => Promise<QueryDenomOwnersByQueryResponse>;
export declare const useGetDenomOwnersByQuery: <TData = QueryDenomOwnersByQueryResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDenomOwnersByQueryRequest, QueryDenomOwnersByQueryResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetSendEnabled: (clientResolver?: RpcResolver) => (request: QuerySendEnabledRequest) => Promise<QuerySendEnabledResponse>;
export declare const useGetSendEnabled: <TData = QuerySendEnabledResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QuerySendEnabledRequest, QuerySendEnabledResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
