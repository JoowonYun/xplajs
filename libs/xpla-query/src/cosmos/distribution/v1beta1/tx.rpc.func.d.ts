import { SigningClientResolver } from "../../../helper-func-types";
import { MsgSetWithdrawAddress, MsgWithdrawDelegatorReward, MsgWithdrawValidatorCommission, MsgFundCommunityPool, MsgUpdateParams, MsgCommunityPoolSpend, MsgDepositValidatorRewardsPool } from "./tx";
export declare const createSetWithdrawAddress: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgSetWithdrawAddress, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useSetWithdrawAddress: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgSetWithdrawAddress>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgSetWithdrawAddress>, unknown>;
export declare const createWithdrawDelegatorReward: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgWithdrawDelegatorReward, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useWithdrawDelegatorReward: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawDelegatorReward>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawDelegatorReward>, unknown>;
export declare const createWithdrawValidatorCommission: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgWithdrawValidatorCommission, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useWithdrawValidatorCommission: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawValidatorCommission>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgWithdrawValidatorCommission>, unknown>;
export declare const createFundCommunityPool: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgFundCommunityPool, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useFundCommunityPool: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgFundCommunityPool>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgFundCommunityPool>, unknown>;
export declare const createUpdateParams: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgUpdateParams, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useUpdateParams: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateParams>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgUpdateParams>, unknown>;
export declare const createCommunityPoolSpend: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgCommunityPoolSpend, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useCommunityPoolSpend: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCommunityPoolSpend>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgCommunityPoolSpend>, unknown>;
export declare const createDepositValidatorRewardsPool: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: MsgDepositValidatorRewardsPool, fee: import("../../../helper-func-types").StdFee | "auto", memo: string) => Promise<import("../../../helper-func-types").DeliverTxResponse>;
export declare const useDepositValidatorRewardsPool: ({ options, clientResolver }: import("../../../react-query").ReactMutationParams<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgDepositValidatorRewardsPool>, unknown>) => import("@tanstack/react-query").UseMutationResult<import("../../../helper-func-types").DeliverTxResponse, Error, import("../../../helper-func-types").ITxArgs<MsgDepositValidatorRewardsPool>, unknown>;
