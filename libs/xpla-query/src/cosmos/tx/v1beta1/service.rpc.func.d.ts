import { RpcResolver } from "../../../helper-func-types";
import { SimulateRequest, SimulateResponse, GetTxRequest, GetTxResponse, BroadcastTxRequest, BroadcastTxResponse, GetTxsEventRequest, GetTxsEventResponse, GetBlockWithTxsRequest, GetBlockWithTxsResponse, TxDecodeRequest, TxDecodeResponse, TxEncodeRequest, TxEncodeResponse, TxEncodeAminoRequest, TxEncodeAminoResponse, TxDecodeAminoRequest, TxDecodeAminoResponse } from "./service";
export declare const createGetSimulate: (clientResolver?: RpcResolver) => (request: SimulateRequest) => Promise<SimulateResponse>;
export declare const useGetSimulate: <TData = SimulateResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<SimulateRequest, SimulateResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetGetTx: (clientResolver?: RpcResolver) => (request: GetTxRequest) => Promise<GetTxResponse>;
export declare const useGetGetTx: <TData = GetTxResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<GetTxRequest, GetTxResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetBroadcastTx: (clientResolver?: RpcResolver) => (request: BroadcastTxRequest) => Promise<BroadcastTxResponse>;
export declare const useGetBroadcastTx: <TData = BroadcastTxResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<BroadcastTxRequest, BroadcastTxResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetGetTxsEvent: (clientResolver?: RpcResolver) => (request: GetTxsEventRequest) => Promise<GetTxsEventResponse>;
export declare const useGetGetTxsEvent: <TData = GetTxsEventResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<GetTxsEventRequest, GetTxsEventResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetGetBlockWithTxs: (clientResolver?: RpcResolver) => (request: GetBlockWithTxsRequest) => Promise<GetBlockWithTxsResponse>;
export declare const useGetGetBlockWithTxs: <TData = GetBlockWithTxsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<GetBlockWithTxsRequest, GetBlockWithTxsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTxDecode: (clientResolver?: RpcResolver) => (request: TxDecodeRequest) => Promise<TxDecodeResponse>;
export declare const useGetTxDecode: <TData = TxDecodeResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<TxDecodeRequest, TxDecodeResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTxEncode: (clientResolver?: RpcResolver) => (request: TxEncodeRequest) => Promise<TxEncodeResponse>;
export declare const useGetTxEncode: <TData = TxEncodeResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<TxEncodeRequest, TxEncodeResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTxEncodeAmino: (clientResolver?: RpcResolver) => (request: TxEncodeAminoRequest) => Promise<TxEncodeAminoResponse>;
export declare const useGetTxEncodeAmino: <TData = TxEncodeAminoResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<TxEncodeAminoRequest, TxEncodeAminoResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTxDecodeAmino: (clientResolver?: RpcResolver) => (request: TxDecodeAminoRequest) => Promise<TxDecodeAminoResponse>;
export declare const useGetTxDecodeAmino: <TData = TxDecodeAminoResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<TxDecodeAminoRequest, TxDecodeAminoResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
