import { RpcResolver } from "../../../helper-func-types";
import { QueryProposalRequest, QueryProposalResponse, QueryProposalsRequest, QueryProposalsResponse, QueryVoteRequest, QueryVoteResponse, QueryVotesRequest, QueryVotesResponse, QueryParamsRequest, QueryParamsResponse, QueryDepositRequest, QueryDepositResponse, QueryDepositsRequest, QueryDepositsResponse, QueryTallyResultRequest, QueryTallyResultResponse } from "./query";
export declare const createGetProposal: (clientResolver?: RpcResolver) => (request: QueryProposalRequest) => Promise<QueryProposalResponse>;
export declare const useGetProposal: <TData = QueryProposalResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryProposalRequest, QueryProposalResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetProposals: (clientResolver?: RpcResolver) => (request: QueryProposalsRequest) => Promise<QueryProposalsResponse>;
export declare const useGetProposals: <TData = QueryProposalsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryProposalsRequest, QueryProposalsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetVote: (clientResolver?: RpcResolver) => (request: QueryVoteRequest) => Promise<QueryVoteResponse>;
export declare const useGetVote: <TData = QueryVoteResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryVoteRequest, QueryVoteResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetVotes: (clientResolver?: RpcResolver) => (request: QueryVotesRequest) => Promise<QueryVotesResponse>;
export declare const useGetVotes: <TData = QueryVotesResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryVotesRequest, QueryVotesResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetParams: (clientResolver?: RpcResolver) => (request: QueryParamsRequest) => Promise<QueryParamsResponse>;
export declare const useGetParams: <TData = QueryParamsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryParamsRequest, QueryParamsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDeposit: (clientResolver?: RpcResolver) => (request: QueryDepositRequest) => Promise<QueryDepositResponse>;
export declare const useGetDeposit: <TData = QueryDepositResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDepositRequest, QueryDepositResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetDeposits: (clientResolver?: RpcResolver) => (request: QueryDepositsRequest) => Promise<QueryDepositsResponse>;
export declare const useGetDeposits: <TData = QueryDepositsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryDepositsRequest, QueryDepositsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTallyResult: (clientResolver?: RpcResolver) => (request: QueryTallyResultRequest) => Promise<QueryTallyResultResponse>;
export declare const useGetTallyResult: <TData = QueryTallyResultResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryTallyResultRequest, QueryTallyResultResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
