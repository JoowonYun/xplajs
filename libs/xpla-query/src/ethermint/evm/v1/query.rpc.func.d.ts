import { MsgEthereumTxResponse } from "./tx";
import { RpcResolver } from "../../../helper-func-types";
import { QueryAccountRequest, QueryAccountResponse, QueryCosmosAccountRequest, QueryCosmosAccountResponse, QueryValidatorAccountRequest, QueryValidatorAccountResponse, QueryBalanceRequest, QueryBalanceResponse, QueryStorageRequest, QueryStorageResponse, QueryCodeRequest, QueryCodeResponse, QueryParamsRequest, QueryParamsResponse, EthCallRequest, EstimateGasResponse, QueryTraceTxRequest, QueryTraceTxResponse, QueryTraceBlockRequest, QueryTraceBlockResponse, QueryBaseFeeRequest, QueryBaseFeeResponse } from "./query";
export declare const createGetAccount: (clientResolver?: RpcResolver) => (request: QueryAccountRequest) => Promise<QueryAccountResponse>;
export declare const useGetAccount: <TData = QueryAccountResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryAccountRequest, QueryAccountResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetCosmosAccount: (clientResolver?: RpcResolver) => (request: QueryCosmosAccountRequest) => Promise<QueryCosmosAccountResponse>;
export declare const useGetCosmosAccount: <TData = QueryCosmosAccountResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryCosmosAccountRequest, QueryCosmosAccountResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetValidatorAccount: (clientResolver?: RpcResolver) => (request: QueryValidatorAccountRequest) => Promise<QueryValidatorAccountResponse>;
export declare const useGetValidatorAccount: <TData = QueryValidatorAccountResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryValidatorAccountRequest, QueryValidatorAccountResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetBalance: (clientResolver?: RpcResolver) => (request: QueryBalanceRequest) => Promise<QueryBalanceResponse>;
export declare const useGetBalance: <TData = QueryBalanceResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryBalanceRequest, QueryBalanceResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetStorage: (clientResolver?: RpcResolver) => (request: QueryStorageRequest) => Promise<QueryStorageResponse>;
export declare const useGetStorage: <TData = QueryStorageResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryStorageRequest, QueryStorageResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetCode: (clientResolver?: RpcResolver) => (request: QueryCodeRequest) => Promise<QueryCodeResponse>;
export declare const useGetCode: <TData = QueryCodeResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryCodeRequest, QueryCodeResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetParams: (clientResolver?: RpcResolver) => (request: QueryParamsRequest) => Promise<QueryParamsResponse>;
export declare const useGetParams: <TData = QueryParamsResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryParamsRequest, QueryParamsResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetEthCall: (clientResolver?: RpcResolver) => (request: EthCallRequest) => Promise<MsgEthereumTxResponse>;
export declare const useGetEthCall: <TData = MsgEthereumTxResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<EthCallRequest, MsgEthereumTxResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetEstimateGas: (clientResolver?: RpcResolver) => (request: EthCallRequest) => Promise<EstimateGasResponse>;
export declare const useGetEstimateGas: <TData = EstimateGasResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<EthCallRequest, EstimateGasResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTraceTx: (clientResolver?: RpcResolver) => (request: QueryTraceTxRequest) => Promise<QueryTraceTxResponse>;
export declare const useGetTraceTx: <TData = QueryTraceTxResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryTraceTxRequest, QueryTraceTxResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetTraceBlock: (clientResolver?: RpcResolver) => (request: QueryTraceBlockRequest) => Promise<QueryTraceBlockResponse>;
export declare const useGetTraceBlock: <TData = QueryTraceBlockResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryTraceBlockRequest, QueryTraceBlockResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const createGetBaseFee: (clientResolver?: RpcResolver) => (request: QueryBaseFeeRequest) => Promise<QueryBaseFeeResponse>;
export declare const useGetBaseFee: <TData = QueryBaseFeeResponse>({ request, options, clientResolver, customizedQueryKey, }: import("../../../react-query").UseQueryParams<QueryBaseFeeRequest, QueryBaseFeeResponse, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
