/**
* This file and any referenced files were automatically generated by @cosmology/telescope@1.10.11
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or npm scripts command that is used to regenerate this bundle.
*/
import { Rpc } from './helpers';
import { ITxArgs, StdFee, DeliverTxResponse, SigningClientResolver, RpcResolver } from './helper-func-types';
import { UseQueryOptions, UseMutationOptions, QueryKey } from '@tanstack/react-query';
import { HttpEndpoint } from "@interchainjs/types";
import { Rpc as ProtobufRpcClient } from "./helpers";
export declare const DEFAULT_RPC_CLIENT_QUERY_KEY = "rpcClient";
export declare const DEFAULT_RPC_ENDPOINT_QUERY_KEY = "rpcEndPoint";
export declare const DEFAULT_SIGNING_CLIENT_QUERY_KEY = "signingClient";
export interface CacheResolver {
    rpcEndpoint?: string | HttpEndpoint;
    clientQueryKey?: string;
}
export declare function isCacheResolver(resolver: unknown): resolver is CacheResolver;
export interface ReactQueryParams<TResponse, TData = TResponse> {
    options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface UseRpcClientQuery<TData> extends ReactQueryParams<ProtobufRpcClient, TData> {
    clientResolver?: CacheResolver;
}
export interface UseRpcEndpointQuery<TData> extends ReactQueryParams<string | HttpEndpoint, TData> {
    getter: () => Promise<string | HttpEndpoint>;
    rpcEndPointKey?: string;
}
export declare const useRpcEndpoint: <TData = string | HttpEndpoint>({ getter, options, rpcEndPointKey, }: UseRpcEndpointQuery<TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export declare const useRpcClient: <TData = Rpc>({ options, clientResolver }: UseRpcClientQuery<TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface UseQueryBuilderOptions<TReq, TRes> {
    builderQueryFn: (clientResolver?: RpcResolver) => (request: TReq) => Promise<TRes>;
    queryKeyPrefix: string;
}
export declare function buildUseQuery<TReq, TRes>(opts: UseQueryBuilderOptions<TReq, TRes>): <TData = TRes>({ request, options, clientResolver, customizedQueryKey, }: UseQueryParams<TReq, TRes, TData>) => import("@tanstack/react-query").UseQueryResult<TData, Error>;
export interface UseQueryParams<TReq, TRes, TData = TRes> extends ReactQueryParams<TRes, TData> {
    request: TReq;
    clientResolver?: CacheResolver | RpcResolver;
    customizedQueryKey?: QueryKey;
}
export interface ReactMutationParams<TData, TError, TVariables, TContext = unknown> {
    options?: UseMutationOptions<TData, TError, TVariables, TContext>;
    clientResolver?: CacheResolver | SigningClientResolver;
}
export interface UseMutationBuilderOptions<TMsg> {
    builderMutationFn: (clientResolver?: SigningClientResolver) => (signerAddress: string, message: TMsg, fee: StdFee | 'auto', memo: string) => Promise<DeliverTxResponse>;
}
export declare function buildUseMutation<TMsg, TError>(opts: UseMutationBuilderOptions<TMsg>): ({ options, clientResolver }: ReactMutationParams<DeliverTxResponse, TError, ITxArgs<TMsg>>) => import("@tanstack/react-query").UseMutationResult<DeliverTxResponse, Error, ITxArgs<TMsg>, unknown>;
