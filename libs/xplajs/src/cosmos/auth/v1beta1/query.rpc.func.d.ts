import { RpcResolver } from "../../../helper-func-types";
import { QueryAccountsRequest, QueryAccountsResponse, QueryAccountRequest, QueryAccountResponse, QueryAccountAddressByIDRequest, QueryAccountAddressByIDResponse, QueryParamsRequest, QueryParamsResponse, QueryModuleAccountsRequest, QueryModuleAccountsResponse, QueryModuleAccountByNameRequest, QueryModuleAccountByNameResponse, Bech32PrefixRequest, Bech32PrefixResponse, AddressBytesToStringRequest, AddressBytesToStringResponse, AddressStringToBytesRequest, AddressStringToBytesResponse, QueryAccountInfoRequest, QueryAccountInfoResponse } from "./query";
export declare const createGetAccounts: (clientResolver?: RpcResolver) => (request: QueryAccountsRequest) => Promise<QueryAccountsResponse>;
export declare const createGetAccount: (clientResolver?: RpcResolver) => (request: QueryAccountRequest) => Promise<QueryAccountResponse>;
export declare const createGetAccountAddressByID: (clientResolver?: RpcResolver) => (request: QueryAccountAddressByIDRequest) => Promise<QueryAccountAddressByIDResponse>;
export declare const createGetParams: (clientResolver?: RpcResolver) => (request: QueryParamsRequest) => Promise<QueryParamsResponse>;
export declare const createGetModuleAccounts: (clientResolver?: RpcResolver) => (request: QueryModuleAccountsRequest) => Promise<QueryModuleAccountsResponse>;
export declare const createGetModuleAccountByName: (clientResolver?: RpcResolver) => (request: QueryModuleAccountByNameRequest) => Promise<QueryModuleAccountByNameResponse>;
export declare const createGetBech32Prefix: (clientResolver?: RpcResolver) => (request: Bech32PrefixRequest) => Promise<Bech32PrefixResponse>;
export declare const createGetAddressBytesToString: (clientResolver?: RpcResolver) => (request: AddressBytesToStringRequest) => Promise<AddressBytesToStringResponse>;
export declare const createGetAddressStringToBytes: (clientResolver?: RpcResolver) => (request: AddressStringToBytesRequest) => Promise<AddressStringToBytesResponse>;
export declare const createGetAccountInfo: (clientResolver?: RpcResolver) => (request: QueryAccountInfoRequest) => Promise<QueryAccountInfoResponse>;
